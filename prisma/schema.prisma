// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "mysql"
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int   @id @default(autoincrement())
  name        String
  email       String   @unique
  password    String
  role        Role     @default(USER)
  consumptions Consumption[]
  inventoryChanges InventoryChange[]
  createdAt   DateTime @default(now())
  order Order[]
}

model Drink {
  id               Int            @id @default(autoincrement())
  name             String
  unit             String           // Ej: 'ml', 'L', 'botella', etc.
  stock         Float
  purchasePrice    Float            // ðŸ’° Precio de compra por unidad
  salePrice        Float            // ðŸ›’ Precio de venta por unidad
  consumptions     Consumption[]
  inventoryChanges InventoryChange[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  orderItems       OrderItem[]
}

model Consumption {
  id           Int   @id @default(autoincrement())
  drink        Drink    @relation(fields: [drinkId], references: [id])
  drinkId      Int
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  amount       Float
  note         String?
  consumptionDate DateTime  // <-- NUEVO CAMPO: fecha del consumo real
  createdAt    DateTime @default(now())
}

model InventoryChange {
  id          Int   @id @default(autoincrement())
  drink       Drink    @relation(fields: [drinkId], references: [id])
  drinkId     Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  change      Float     // Ej: +50 o -10
  reason      String?
  createdAt   DateTime @default(now())
}

enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  pending
  paid
  cancelled
}

model Order {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  totalAmount Float
  status      OrderStatus @default(pending) // Estatus del pedido
  orderItems  OrderItem[]
  createdAt   DateTime   @default(now())
}

model OrderItem {
  id        Int    @id @default(autoincrement())
  order     Order  @relation(fields: [orderId], references: [id])
  orderId   Int
  drink     Drink  @relation(fields: [drinkId], references: [id])
  drinkId   Int
  quantity  Float
  price     Float
  
}
